plugins {
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18, 6.2)'
    //id 'net.minecraftforge.gradle' version '6.0.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    //id 'net.darkhax.curseforgegradle' version '1.1.15'
    //id "net.dumbcode.gradlehook" version "2.0.2"
}

version = mod_version
group = mod_group_id

base {
    archivesName = "${mod_id}-${mc_version}"
}

mixin {
    add sourceSets.main, "swdm.refmap.json"
    config 'swdm.mixins.json'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // MC 1.18.2 = Java 17
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {

    mappings channel: mapping_channel, version: "${mapping_version}-${mc_version}"
    copyIdeResources = true
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            jvmArgs("-Dgeckolib.disable_examples=true")

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
            args "--username", "Silverwolf114201", "--uuid", "2b6094b0-93cc-45ac-b64b-309ef224e4eb"
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dirs 'lib'
    }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "KosmX's maven"
        url = "https://maven.kosmx.dev/"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
}

dependencies {
    minecraft "net.neoforged:forge:${mc_version}-${forge_version}"

    // Compile
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))

    // Runtime
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
    //runtimeOnly fg.deobf("_:swem-forge-1.18.2:1.3.0-12")
    implementation 'org.jetbrains:annotations:20.1.0'

    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mc_version   : mc_version, mc_version_range: mc_version_range,
            forge_version         : forge_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

task sendWebhook {
    doLast {
        def cfUrl = project.findProperty("curseforge_file_url")
        def modrinthUrl = project.findProperty("modrinth_file_url")
        def discordChangeLog = createDiscordChangelog(cfUrl)

        def result = DiscordBuilder.createForm {
            embed {
                color = Integer.decode(project.project_color)
                author {
                    name = project.project_name
                    url = project.project_url
                }
                thumbnail {
                    url = project.project_logo
                }
                title = "$project.project_name v$project.version for $project.mc_version Released"
                url = cfUrl
                field {
                    name = "Changes:"
                    value = discordChangeLog
                }
                field {
                    name = "Downloads:"
                    value = "[$curseforge_emote Curseforge]($cfUrl)\n[$modrinth_emote Modrinth]($modrinthUrl)"
                }
                footer {
                    text = "A $project.loader_name Mod"
                    icon_url = project.loader_icon
                }
            }
        }.send(project.discord_webhook_url)

        println "Discord Webhook Response: " + result.responseCode
    }
}

String createDiscordChangelog(fullChangelogUrl) {
    def webhookChangelog = StringBuilder.newInstance()
    def changelogLines = getDiscordChangelog()
    def maxLines = Integer.decode(project.discord_webhook_changelog_line_limit)

    def lines = 0
    changelogLines.find { line ->
        if (webhookChangelog.length() == 0) {
            webhookChangelog << line
        } else {
            webhookChangelog << "\n$line"
        }
        lines++
        if (lines >= maxLines) {
            webhookChangelog << "\n(+ " + (changelogLines.length - lines) + " more) See [Full Changelog]($fullChangelogUrl)"
            return true;
        }
    }

    return webhookChangelog.toString()
}

List<String> getDiscordChangelog() {
    def changelogFile = file('changelog.md')
    List<String> strings = new ArrayList<>();

    String str = '';
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it

            if (it.startsWith("##")) {
                return
            } else if (it.startsWith('-')) {
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "[\$0](https://github.com/\$1/issues/\$2)");
                temp = temp.replaceAll("#([0-9]+)\\b(?!])", "[\$0](https://github.com/alaharranhonor/swdecom/issues/\$1)");
            }
            str += "$temp\n"
            if (str.length() > 900) {
                strings.add(str)
                str = ''
            }
            println str.length()
            lineCount++
            return
        } else {
            done = true
        }
    }
    strings.add(str)
    return strings
}
