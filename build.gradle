
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url='https://repo.spongepowered.org/repository/maven-public/' }
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
        classpath 'org.parchmentmc:librarian:1.+'
        classpath "net.dumbcode.gradlehook:GradleHook:1.3.1"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "net.dumbcode.gradlehook"
apply plugin: 'org.spongepowered.mixin'

group = 'com.alaharranhonor.swdm' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "swdm-${mc_version}-${mod_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // MC 1.18.2 = Java 17

mixin {
    add sourceSets.main, "swdm.refmap.json"
    config 'swdm.mixins.json'
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'parchment', version: "${parchment_version}-${mc_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'
            jvmArgs("-Dgeckolib.disable_examples=true")

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args "--username", "Silverwolf114201", "--uuid", "2b6094b0-93cc-45ac-b64b-309ef224e4eb"
            //jvmArgs "-Xmx5G"

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'
            jvmArgs("-Dgeckolib.disable_examples=true")

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'swdm', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')

            environment 'target', 'fmluserdevdata'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dirs 'lib'
    }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "KosmX's maven"
        url = "https://maven.kosmx.dev/"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
}
dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    //implementation fg.deobf("software.bernie.geckolib:geckolib-1.18-forge:${geckolib_version}")
    //compileOnly fg.deobf("com.alaharranhonor.swem:swem:${mc_version}-${swem_version}")
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-1.18:3.0.57")
    implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:0.4.0+1.18")
    runtimeOnly fg.deobf("_:worldedit-mod:7.2.10")
    runtimeOnly fg.deobf("_:ferritecore:4.2.2-forge")
    //implementation fg.deobf("curse.maven:swlm-381070:${swlm_slug}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:9.7.1.255")
    runtimeOnly fg.deobf("_:swem-forge-1.18.2:1.3.0-12")
    implementation 'org.jetbrains:annotations:20.1.0'

    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}

jar {
    manifest {
        attributes([
            "Specification-Title": "swdm",
            "Specification-Vendor": "swdmalaharranhonor",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"swdmalaharranhonor",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

task sendWebhook {
    doLast {
        def cfUrl = project.findProperty("curseforge_file_url")
        def modrinthUrl = project.findProperty("modrinth_file_url")
        def discordChangeLog = createDiscordChangelog(cfUrl)

        def result = DiscordBuilder.createForm {
            embed {
                color = Integer.decode(project.project_color)
                author {
                    name = project.project_name
                    url = project.project_url
                }
                thumbnail {
                    url = project.project_logo
                }
                title = "$project.project_name v$project.version for $project.mc_version Released"
                url = cfUrl
                field {
                    name = "Changes:"
                    value = discordChangeLog
                }
                field {
                    name = "Downloads:"
                    value = "[$curseforge_emote Curseforge]($cfUrl)\n[$modrinth_emote Modrinth]($modrinthUrl)"
                }
                footer {
                    text = "A $project.loader_name Mod"
                    icon_url = project.loader_icon
                }
            }
        }.send(project.discord_webhook_url)

        println "Discord Webhook Response: " + result.responseCode
    }
}

String createDiscordChangelog(fullChangelogUrl) {
    def webhookChangelog = StringBuilder.newInstance()
    def changelogLines = getDiscordChangelog()
    def maxLines = Integer.decode(project.discord_webhook_changelog_line_limit)

    def lines = 0
    changelogLines.find { line ->
        if (webhookChangelog.length() == 0) {
            webhookChangelog << line
        } else {
            webhookChangelog << "\n$line"
        }
        lines++
        if (lines >= maxLines) {
            webhookChangelog << "\n(+ " + (changelogLines.length - lines) + " more) See [Full Changelog]($fullChangelogUrl)"
            return true;
        }
    }

    return webhookChangelog.toString()
}

List<String> getDiscordChangelog() {
    def changelogFile = file('changelog.md')
    List<String> strings = new ArrayList<>();

    String str = '';
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it

            if (it.startsWith("##")) {
                return
            } else if (it.startsWith('-')) {
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "[\$0](https://github.com/\$1/issues/\$2)");
                temp = temp.replaceAll("#([0-9]+)\\b(?!])", "[\$0](https://github.com/alaharranhonor/swdecom/issues/\$1)");
            }
            str += "$temp\n"
            if (str.length() > 900) {
                strings.add(str)
                str = ''
            }
            println str.length()
            lineCount++
            return
        } else {
            done = true
        }
    }
    strings.add(str)
    return strings
}
